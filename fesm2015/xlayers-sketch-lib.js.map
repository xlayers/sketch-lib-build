{"version":3,"file":"xlayers-sketch-lib.js","sources":["ng://@xlayers/sketch-lib/lib/format.service.ts","ng://@xlayers/sketch-lib/lib/image.service.ts","ng://@xlayers/sketch-lib/lib/layer.service.ts","ng://@xlayers/sketch-lib/lib/symbol.service.ts","ng://@xlayers/sketch-lib/lib/bplist.service.ts","ng://@xlayers/sketch-lib/lib/text.service.ts","ng://@xlayers/sketch-lib/lib/shape.service.ts","ng://@xlayers/sketch-lib/lib/style.service.ts","ng://@xlayers/sketch-lib/lib/sketch-lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport paramCase from 'param-case';\r\nimport pascalCase from 'pascal-case';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormatService {\r\n  indent(n: number, content: string) {\r\n    const indentation = !!n ? '  '.repeat(n) : '';\r\n    return indentation + content;\r\n  }\r\n\r\n  indentFile(n: number, contents: string) {\r\n    return contents.split('\\n').map(line => this.indent(n, line));\r\n  }\r\n\r\n  className(name: string) {\r\n    return pascalCase(name);\r\n  }\r\n\r\n  normalizeName(name: string) {\r\n    return paramCase(name);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormatService } from './format.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n  constructor(private readonly formatService: FormatService) {}\r\n\r\n  identify(current: SketchMSLayer) {\r\n    return (current._class as string) === 'bitmap';\r\n  }\r\n\r\n  lookup(current: SketchMSLayer, data: SketchMSData) {\r\n    return this.getImageDataFromRef(data, (current as any).image._ref);\r\n  }\r\n\r\n  aggregate(current: SketchMSLayer, data: SketchMSData, options: any) {\r\n    return [\r\n      {\r\n        kind: 'png',\r\n        value: this.getImageDataFromRef(data, (current as any).image._ref),\r\n        language: 'base64',\r\n        uri: `${options.assetDir}/${this.formatService.normalizeName(\r\n          current.name\r\n        )}.png`\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getImageDataFromRef(data: SketchMSData, reference: string) {\r\n    return (data as any).images[reference];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LayerService {\r\n  identify(current: SketchMSLayer) {\r\n    return current.layers && Array.isArray(current.layers);\r\n  }\r\n\r\n  lookup(current: SketchMSLayer) {\r\n    return current.layers as any;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SymbolService {\r\n  identify(current: SketchMSLayer) {\r\n    return (current._class as string) === 'symbolInstance';\r\n  }\r\n\r\n  lookup(current: SketchMSLayer, data: SketchMSData) {\r\n    const foreignSymbol = data.document.foreignSymbols.find(\r\n      x => x.symbolMaster.symbolID === (current as any).symbolID\r\n    );\r\n\r\n    return foreignSymbol && foreignSymbol.symbolMaster;\r\n  }\r\n}\r\n","const Buffer = require('buffer/').Buffer;\r\nconst BigInt = window['BigInt'] || require('big-integer');\r\nimport { Injectable } from '@angular/core';\r\ntype BufferEncoding = 'hex' | 'utf8' | 'utf-8' | 'ascii' | 'latin1' | 'binary' | 'base64' | 'ucs2' | 'ucs-2' | 'utf16le' | 'utf-16le';\r\n\r\nclass PropertyListFormatException extends Error {\r\n  constructor(message) {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = 'PropertyListFormatException';\r\n    this.message = message;\r\n  }\r\n}\r\nclass UnsupportedEncodingException extends Error {\r\n  constructor(message) {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = 'UnsupportedEncodingException';\r\n    this.message = message;\r\n  }\r\n}\r\nclass UnsupportedOperationException extends Error {\r\n  constructor(message) {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = 'UnsupportedOperationException';\r\n    this.message = message;\r\n  }\r\n}\r\nclass IllegalArgumentException extends Error {\r\n  constructor(message) {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = 'IllegalArgumentException';\r\n    this.message = message;\r\n  }\r\n}\r\nexport class UID {\r\n  constructor(private value: number, private buffer: Buffer, private string: string) {}\r\n}\r\n\r\n/*\r\nResource: https://opensource.apple.com/source/CF/CF-550/\r\n\r\nHEADER\r\n\tmagic number (\"bplist\")\r\n\tfile format version\r\n\r\nOBJECT TABLE\r\n\tvariable-sized objects\r\n\r\n\tObject Formats (marker byte followed by additional info in some cases)\r\n\tnull    0000 0000\r\n\tbool    0000 1000\t\t\t                    // false\r\n\tbool    0000 1001\t\t\t                    // true\r\n\tfill    0000 1111\t\t\t                    // fill byte\r\n\tint     0001 nnnn\t...\t\t                  // # of bytes is 2^nnnn, big-endian bytes\r\n\treal    0010 nnnn\t...\t\t                  // # of bytes is 2^nnnn, big-endian bytes\r\n\tdate    0011 0011\t...\t\t                  // 8 byte float follows, big-endian bytes\r\n\tdata    0100 nnnn\t[int]\t...\t              // nnnn is number of bytes unless 1111 then int count follows, followed by bytes\r\n\tstring  0101 nnnn\t[int]\t...\t              // ASCII string, nnnn is # of chars, else 1111 then int count, then bytes\r\n\tstring  0110 nnnn\t[int]\t...\t              // Unicode string, nnnn is # of chars, else 1111 then int count, then big-endian 2-byte uint16_t\r\n          0111 xxxx\t\t\t                    // unused\r\n\tuid     1000 nnnn\t...\t\t                  // nnnn+1 is # of bytes\r\n          1001 xxxx\t\t\t                    // unused\r\n\tarray   1010 nnnn\t[int]\tobjref*\t          // nnnn is count, unless '1111', then int count follows\r\n          1011 xxxx\t\t\t                    // unused\r\n\tser     1100 nnnn\t[int]\tobjref*           // nnnn is count, unless '1111', then int count follows\r\n\tdict    1101 nnnn\t[int]\tkeyref* objref*\t  // nnnn is count, unless '1111', then int count follows\r\n          1110 xxxx\t\t\t                    // unused\r\n          1111 xxxx\t\t\t                    // unused\r\n\r\nOFFSET TABLE\r\n\tlist of ints, byte size of which is given in trailer\r\n\t-- these are the byte offsets into the file\r\n\t-- number of these is in the trailer\r\n\r\nTRAILER\r\n\tbyte size of offset ints in offset table\r\n\tbyte size of object refs in arrays and dicts\r\n\tnumber of offsets in offset table (also is number of objects)\r\n\telement # in offset table which is top level object\r\n\toffset table offset\r\n\r\n*/\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BplistService {\r\n  /**\r\n   * The property list data.\r\n   */\r\n  private bytes: Buffer;\r\n  /**\r\n   * The parsed content.\r\n   */\r\n  private content: any;\r\n\r\n  /**\r\n   * Length of an object reference in bytes\r\n   */\r\n  private objectRefSize: number;\r\n\r\n  /**\r\n   * The table holding the information at which offset each object is found\r\n   */\r\n  private offsetTable: Array<number>;\r\n\r\n  /**\r\n   * Parses a binary property list from a binary base64 string.\r\n   *\r\n   * @param data The binary property list's data encoded as base64 string.\r\n   * @return The root object of the property list. This is usually a NSDictionary but can also be a NSArray.\r\n   * @throws PropertyListFormatException When the property list's format could not be parsed.\r\n   * @throws UnsupportedEncodingException When a NSString object could not be decoded.\r\n   */\r\n  public parse64Content(data: string) {\r\n    const raw = atob(data);\r\n    const rawLength = raw.length;\r\n    const array: Buffer = new Buffer(rawLength);\r\n\r\n    for (let i = 0; i < rawLength; i++) {\r\n      array[i] = raw.charCodeAt(i);\r\n    }\r\n    this.content = this.doParse(array);\r\n\r\n    return this.content;\r\n  }\r\n\r\n  /**\r\n   * Parses a binary property list from a buffer.\r\n   *\r\n   * @param data The binary property list's data.\r\n   * @return The root object of the property list. This is usually a NSDictionary but can also be a NSArray.\r\n   * @throws PropertyListFormatException When the property list's format could not be parsed.\r\n   * @throws UnsupportedEncodingException When a NSString object could not be decoded.\r\n   */\r\n  public parse(data: Buffer) {\r\n    this.content = this.doParse(data);\r\n\r\n    return this.content;\r\n  }\r\n\r\n  public toJson(map = new Map<any, any>()) {\r\n    const out = Object.create(null);\r\n    this.content.forEach((value, key) => {\r\n      if (value instanceof Map) {\r\n        out[key] = this.toJson(value);\r\n      } else {\r\n        out[key] = value;\r\n      }\r\n    });\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Parses a binary property list from a byte array.\r\n   *\r\n   * @param data The binary property list's data.\r\n   * @return The root object of the property list. This is usually a NSDictionary but can also be a NSArray.\r\n   * @throws PropertyListFormatException When the property list's format could not be parsed.\r\n   * @throws UnsupportedEncodingException When a NSString object could not be decoded.\r\n   */\r\n  private doParse(data: Buffer) {\r\n    this.bytes = data;\r\n\r\n    const magic = this.buffer2String(data, 0, 8);\r\n\r\n    if (!magic.startsWith('bplist') && !magic.startsWith('plist')) {\r\n      // throw new IllegalArgumentException(`'The given data is no binary property list. Wrong magic bytes: ${magic}`);\r\n      console.error(`'The given data is no binary property list. Wrong magic bytes: ${magic}`);\r\n    }\r\n\r\n    /*\r\n     * Handle trailer, last 32 bytes of the file\r\n     */\r\n    const trailer: Buffer = this.copyOfRange(this.bytes, this.bytes.length - 32, this.bytes.length);\r\n\r\n    // 6 null bytes (index 0 to 5)\r\n\r\n    const offsetSize: number = this.parseUnsignedInt(trailer, 6, 7);\r\n    this.objectRefSize = this.parseUnsignedInt(trailer, 7, 8);\r\n    const numObjects: number = this.parseUnsignedInt(trailer, 8, 16);\r\n    const topObject: number = this.parseUnsignedInt(trailer, 16, 24);\r\n    const offsetTableOffset: number = this.parseUnsignedInt(trailer, 24, 32);\r\n\r\n    /*\r\n       * Handle offset table\r\n       */\r\n    this.offsetTable = new Array(numObjects);\r\n\r\n    for (let i = 0; i < numObjects; i++) {\r\n      this.offsetTable[i] = this.parseUnsignedInt(this.bytes, offsetTableOffset + i * offsetSize, offsetTableOffset + (i + 1) * offsetSize);\r\n    }\r\n\r\n    return this.visit(topObject);\r\n  }\r\n\r\n  private buffer2String(bytes: Buffer, startIndex: number, endIndex: number, encoding: BufferEncoding = 'utf-8') {\r\n    return this.copyOfRange(bytes, startIndex, endIndex).toString(encoding);\r\n  }\r\n\r\n  /**\r\n   * Copies a part of a byte array into a new array.\r\n   *\r\n   * @param src        The source array.\r\n   * @param startIndex The index from which to start copying.\r\n   * @param endIndex   The index until which to copy.\r\n   * @return The copied array.\r\n   */\r\n  private copyOfRange(src: Buffer, startIndex: number, endIndex: number) {\r\n    const length = endIndex - startIndex;\r\n    if (length < 0) {\r\n      // throw new IllegalArgumentException(`startIndex (${startIndex})\" + \" > endIndex (${endIndex})`);\r\n      console.error(`startIndex (${startIndex})\" + \" > endIndex (${endIndex})`);\r\n    }\r\n    return src.slice(startIndex, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Parses an unsigned integer from a byte array.\r\n   *\r\n   * @param bytes The byte array containing the unsigned integer.\r\n   * @param startIndex Beginning of the unsigned int in the byte array.\r\n   * @param endIndex End of the unsigned int in the byte array.\r\n   * @return The unsigned integer represented by the given bytes.\r\n   */\r\n  private parseUnsignedInt(bytes: Buffer, startIndex: number, endIndex: number) {\r\n    let l = 0;\r\n    for (let i = startIndex; i < endIndex; i++) {\r\n      l <<= 8;\r\n      l |= bytes[i] & 0xff;\r\n    }\r\n    // l &= 0xffffffffff;\r\n    l &= 0xff;\r\n    return l;\r\n  }\r\n\r\n  private calculateUtf8StringLength(bytes: Buffer, offset: number, numCharacters: number) {\r\n    let length = 0;\r\n    for (let i = 0; i < numCharacters; i++) {\r\n      const tempOffset = offset + length;\r\n      if (bytes.length <= tempOffset) {\r\n        // WARNING: Invalid UTF-8 string, fall back to length = number of characters\r\n        return numCharacters;\r\n      }\r\n      if (bytes[tempOffset] < 0x80) {\r\n        length++;\r\n      }\r\n      if (bytes[tempOffset] < 0xc2) {\r\n        // Invalid value (marks continuation byte), fall back to length = number of characters\r\n        return numCharacters;\r\n      } else if (bytes[tempOffset] < 0xe0) {\r\n        if ((bytes[tempOffset + 1] & 0xc0) !== 0x80) {\r\n          // Invalid continuation byte, fall back to length = number of characters\r\n          return numCharacters;\r\n        }\r\n        length += 2;\r\n      } else if (bytes[tempOffset] < 0xf0) {\r\n        if ((bytes[tempOffset + 1] & 0xc0) !== 0x80 || (bytes[tempOffset + 2] & 0xc0) !== 0x80) {\r\n          // Invalid continuation byte, fall back to length = number of characters\r\n          return numCharacters;\r\n        }\r\n        length += 3;\r\n      } else if (bytes[tempOffset] < 0xf5) {\r\n        if ((bytes[tempOffset + 1] & 0xc0) !== 0x80 || (bytes[tempOffset + 2] & 0xc0) !== 0x80 || (bytes[tempOffset + 3] & 0xc0) !== 0x80) {\r\n          // Invalid continuation byte, fall back to length = number of characters\r\n          return numCharacters;\r\n        }\r\n        length += 4;\r\n      }\r\n    }\r\n    return length;\r\n  }\r\n  /**\r\n   * Reads the length for arrays, sets and dictionaries.\r\n   *\r\n   * @param objInfo Object information byte.\r\n   * @param offset  Offset in the byte array at which the object is located.\r\n   * @return An array with the length two. First entry is the length, second entry the offset at which the content starts.\r\n   */\r\n  private readLengthAndOffset(objInfo: number, offset: number) {\r\n    let lengthValue = objInfo;\r\n    let offsetValue = 1;\r\n    if (objInfo === 0xf) {\r\n      const int_type = this.bytes[offset + 1];\r\n      const intType = (int_type & 0xf0) >> 4;\r\n      if (intType !== 0x1) {\r\n        console.warn(`BinaryPropertyListParser: Length integer has an unexpected type ${intType}. Attempting to parse anyway...`);\r\n      }\r\n      const intInfo = int_type & 0x0f;\r\n      const intLength = Math.pow(2, intInfo);\r\n      offsetValue = 2 + intLength;\r\n      if (intLength < 3) {\r\n        lengthValue = this.parseUnsignedInt(this.bytes, offset + 2, offset + 2 + intLength);\r\n      } else {\r\n        lengthValue = new BigInt(this.copyOfRange(this.bytes, offset + 2, offset + 2 + intLength)).intValue();\r\n      }\r\n    }\r\n    return [lengthValue, offsetValue];\r\n  }\r\n\r\n  /**\r\n   * Parses an object inside the currently parsed binary property list.\r\n   * For the format specification check\r\n   * <a href=\"http://www.opensource.apple.com/source/CF/CF-855.17/CFBinaryPList.c\">\r\n   * Apple's binary property list parser implementation</a>.\r\n   *\r\n   * @param obj The object ID.\r\n   * @return The parsed object.\r\n   * @throws PropertyListFormatException When the property list's format could not be parsed.\r\n   * @throws UnsupportedEncodingException When a NSString object could not be decoded.\r\n   */\r\n  private visit(obj: number) {\r\n    const offset = this.offsetTable[obj];\r\n    const type = this.bytes[offset];\r\n    const objType = (type & 0xf0) >> 4; // First  4 bits\r\n    const objInfo = type & 0x0f; // Second 4 bits\r\n\r\n    switch (objType) {\r\n      case 0x0: {\r\n        // Simple\r\n        switch (objInfo) {\r\n          case 0x0: {\r\n            // null object (v1.0 and later)\r\n            return {\r\n              $key: 'null',\r\n              $value: null\r\n            };\r\n          }\r\n          case 0x8: {\r\n            // false\r\n            return {\r\n              $key: 'false',\r\n              $value: false\r\n            };\r\n          }\r\n          case 0x9: {\r\n            // true\r\n            return {\r\n              $key: 'true',\r\n              $value: true\r\n            };\r\n          }\r\n          case 0xc: {\r\n            // URL with no base URL (v1.0 and later)\r\n            // TODO Implement binary URL parsing (not yet even implemented in Core Foundation as of revision 855.17)\r\n            // throw new UnsupportedOperationException(\r\n            console.error(`The given binary property list contains a URL object. Parsing of this object type is not yet implemented.`);\r\n            break;\r\n          }\r\n          case 0xd: {\r\n            // URL with base URL (v1.0 and later)\r\n            // TODO Implement binary URL parsing (not yet even implemented in Core Foundation as of revision 855.17)\r\n            // throw new UnsupportedOperationException(\r\n            console.error(`The given binary property list contains a URL object. Parsing of this object type is not yet implemented.`);\r\n            break;\r\n          }\r\n          case 0xe: {\r\n            // 16-byte UUID (v1.0 and later)\r\n            // TODO Implement binary UUID parsing (not yet even implemented in Core Foundation as of revision 855.17)\r\n            // throw new UnsupportedOperationException(\r\n            console.error(`The given binary property list contains a UUID object. Parsing of this object type is not yet implemented.`);\r\n            break;\r\n          }\r\n          default: {\r\n            // throw new PropertyListFormatException(`The given binary property list contains an object of unknown type (${objType})`);\r\n            console.error(`The given binary property list contains an object of unknown type (${objType})`);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 0x1: {\r\n        // integer\r\n        const len = Math.pow(2, objInfo);\r\n        const value = this.buffer2String(this.bytes, offset + 1, offset + 1 + len);\r\n\r\n        return {\r\n          $key: 'integer',\r\n          $value: parseInt(value, 10)\r\n        };\r\n      }\r\n      case 0x2: {\r\n        // real\r\n        const len = Math.pow(2, objInfo);\r\n        const value = this.buffer2String(this.bytes, offset + 1, offset + 1 + len);\r\n\r\n        return {\r\n          $key: 'float',\r\n          $value: parseFloat(value)\r\n        };\r\n      }\r\n      case 0x3: {\r\n        // Date\r\n        if (objInfo !== 0x3) {\r\n          // throw new PropertyListFormatException(`The given binary property list contains a date object of an unknown type (${objInfo})`);\r\n          console.error(`The given binary property list contains a date object of an unknown type (${objInfo})`);\r\n        }\r\n        return {\r\n          $key: 'date',\r\n          $value: new Date(this.buffer2String(this.bytes, offset + 1, offset + 9))\r\n        };\r\n      }\r\n      case 0x4: {\r\n        // Data: interpreted as Base-64 encoded\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0];\r\n        const dataOffset = lengthAndOffset[1];\r\n        const value = this.buffer2String(this.bytes, offset + dataOffset, offset + dataOffset + len);\r\n\r\n        return {\r\n          $key: 'data',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0x5: {\r\n        // ASCII string\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0]; // Each character is 1 byte\r\n        const strOffset = lengthAndOffset[1];\r\n        const value = this.buffer2String(this.bytes, offset + strOffset, offset + strOffset + len, 'ascii');\r\n\r\n        return {\r\n          $key: 'ascii',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0x6: {\r\n        // UTF-16-BE string\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const characters = lengthAndOffset[0];\r\n        const strOffset = lengthAndOffset[1];\r\n        // UTF-16 characters can have variable length, but the Core Foundation reference implementation\r\n        // assumes 2 byte characters, thus only covering the Basic Multilingual Plane\r\n\r\n        const len = characters * 2;\r\n        const startIndex = strOffset;\r\n        const endIndex = offset + strOffset + len;\r\n        const value = this.buffer2String(this.bytes, startIndex, (startIndex + offset) * 2 ** 8 + endIndex, 'base64');\r\n        // const value = this.buffer2String(this.bytes, offset + strOffset, offset + strOffset + length, 'base64');\r\n\r\n        if (this.isBase64(value)) {\r\n          return this.parse64Content(value);\r\n        } else {\r\n          return {\r\n            $key: 'utf-16',\r\n            $value: value\r\n          };\r\n        }\r\n      }\r\n      case 0x7: {\r\n        // UTF-8 string (v1.0 and later)\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const strOffset = lengthAndOffset[1];\r\n        const characters = lengthAndOffset[0];\r\n        // UTF-8 characters can have variable length, so we need to calculate the byte length dynamically\r\n        // by reading the UTF-8 characters one by one\r\n        const len = this.calculateUtf8StringLength(this.bytes, offset + strOffset, characters);\r\n        const value = this.buffer2String(this.bytes, offset + strOffset, offset + strOffset + len);\r\n\r\n        return {\r\n          $key: 'utf-8',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0x8: {\r\n        // UID (v1.0 and later)\r\n        const len = objInfo + 1;\r\n        const value = new UID(\r\n          obj.valueOf(),\r\n          this.copyOfRange(this.bytes, offset + 1, offset + 1 + len),\r\n          this.buffer2String(this.bytes, offset + 1, offset + 1 + len)\r\n        );\r\n\r\n        return {\r\n          $key: 'uid',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0xa: {\r\n        // Array\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0];\r\n        const arrayOffset = lengthAndOffset[1];\r\n\r\n        const value = new Array(len);\r\n        for (let i = 0; i < len; i++) {\r\n          const objRef = this.parseUnsignedInt(\r\n            this.bytes,\r\n            offset + arrayOffset + i * this.objectRefSize,\r\n            offset + arrayOffset + (i + 1) * this.objectRefSize\r\n          );\r\n          value.push(this.visit(objRef));\r\n        }\r\n\r\n        return {\r\n          $key: 'array',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0xb: {\r\n        // Ordered set (v1.0 and later)\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0];\r\n        const contentOffset = lengthAndOffset[1];\r\n\r\n        const value = new Set();\r\n        for (let i = 0; i < len; i++) {\r\n          const objRef = this.parseUnsignedInt(\r\n            this.bytes,\r\n            offset + contentOffset + i * this.objectRefSize,\r\n            offset + contentOffset + (i + 1) * this.objectRefSize\r\n          );\r\n          value.add(this.visit(objRef));\r\n        }\r\n\r\n        return {\r\n          $key: 'order-set',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0xc: {\r\n        // Set (v1.0 and later)\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0];\r\n        const contentOffset = lengthAndOffset[1];\r\n\r\n        const value = new Set();\r\n        for (let i = 0; i < len; i++) {\r\n          const objRef = this.parseUnsignedInt(\r\n            this.bytes,\r\n            offset + contentOffset + i * this.objectRefSize,\r\n            offset + contentOffset + (i + 1) * this.objectRefSize\r\n          );\r\n          value.add(this.visit(objRef));\r\n        }\r\n\r\n        return {\r\n          $key: 'set',\r\n          $value: value\r\n        };\r\n      }\r\n      case 0xd: {\r\n        // Dictionary\r\n        const lengthAndOffset: number[] = this.readLengthAndOffset(objInfo, offset);\r\n        const len = lengthAndOffset[0];\r\n        const contentOffset = lengthAndOffset[1];\r\n\r\n        const value = new Map();\r\n        for (let i = 0; i < len; i++) {\r\n          const keyRef = this.parseUnsignedInt(\r\n            this.bytes,\r\n            offset + contentOffset + i * this.objectRefSize,\r\n            offset + contentOffset + (i + 1) * this.objectRefSize\r\n          );\r\n          const valRef = this.parseUnsignedInt(\r\n            this.bytes,\r\n            offset + contentOffset + len * this.objectRefSize + i * this.objectRefSize,\r\n            offset + contentOffset + len * this.objectRefSize + (i + 1) * this.objectRefSize\r\n          );\r\n          const key = this.visit(keyRef);\r\n          const val = this.visit(valRef);\r\n          value.set(key.$key.toString(), val);\r\n        }\r\n\r\n        return {\r\n          $key: 'dictionary',\r\n          $value: value\r\n        };\r\n      }\r\n      default: {\r\n        // throw new PropertyListFormatException(`The given binary property list contains an object of unknown type (${objType})`);\r\n        console.error(`The given binary property list contains an object of unknown type (${objType})`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private isBase64(value: string) {\r\n    return /^([\\+\\/-9A-Za-z]{4})*([\\+\\/-9A-Za-z]{4}|[\\+\\/-9A-Za-z]{3}=|[\\+\\/-9A-Za-z]{2}==)$/u.test(value);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BplistService } from './bplist.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TextService {\r\n  constructor(private binaryHelperService: BplistService) {}\r\n\r\n  identify(current: SketchMSLayer) {\r\n    return (current._class as string) === 'text';\r\n  }\r\n\r\n  lookup(current: SketchMSLayer) {\r\n    return (\r\n      current.attributedString.string ||\r\n      this.extractAttributedStringText(current)\r\n    );\r\n  }\r\n\r\n  private extractAttributedStringText(current: SketchMSLayer) {\r\n    const obj = current.attributedString;\r\n\r\n    if (obj && obj.hasOwnProperty('archivedAttributedString')) {\r\n      const archive = this.binaryHelperService.parse64Content(\r\n        obj.archivedAttributedString._archive\r\n      );\r\n\r\n      if (archive) {\r\n        return this.decodeArchiveString(archive);\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private decodeArchiveString(archive) {\r\n    switch (archive.$key) {\r\n      case 'ascii':\r\n        return archive.$value;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShapeService {\r\n  parsePoint(point: string, offset: number, current: SketchMSLayer) {\r\n    const parsedPoint = point.slice(1, -1).split(', ');\r\n    return {\r\n      x: Number.parseFloat(\r\n        (\r\n          current.frame.width * Number.parseFloat(parsedPoint[0]) +\r\n          offset\r\n        ).toFixed(3)\r\n      ),\r\n      y: Number.parseFloat(\r\n        (\r\n          current.frame.height * Number.parseFloat(parsedPoint[1]) +\r\n          offset\r\n        ).toFixed(3)\r\n      )\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleService {\r\n  parseColor(color: SketchMSColor) {\r\n    return {\r\n      red: this.percentToRgba(color.red),\r\n      green: this.percentToRgba(color.green),\r\n      blue: this.percentToRgba(color.blue),\r\n      alpha: color.alpha\r\n    };\r\n  }\r\n\r\n  parseColorAsRgba(color: SketchMSColor) {\r\n    const c = this.parseColor(color);\r\n    const colorString = [c.red, c.green, c.blue, c.alpha.toFixed(2)].join(',');\r\n    return `rgba(${colorString})`;\r\n  }\r\n\r\n  parseColorAsHex(color: SketchMSColor) {\r\n    const c = this.parseColor(color);\r\n\r\n    return (\r\n      '#' +\r\n      ((256 + c.red).toString(16).substr(1) +\r\n        (\r\n          ((1 << 24) + (c.green << 16)) |\r\n          (c.blue << 8) |\r\n          this.percentToRgba(c.alpha)\r\n        )\r\n          .toString(16)\r\n          .substr(1))\r\n    );\r\n  }\r\n\r\n  private percentToRgba(v: number) {\r\n    const color = Math.round(v * 255);\r\n    return color > 0 ? color : 0;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BplistService } from './bplist.service';\r\nimport { FormatService } from './format.service';\r\nimport { ShapeService } from './shape.service';\r\nimport { StyleService } from './style.service';\r\n\r\n@NgModule({\r\n  providers: [BplistService, FormatService, ShapeService, StyleService]\r\n})\r\nexport class SketchLibModule {}\r\n"],"names":[],"mappings":"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"}